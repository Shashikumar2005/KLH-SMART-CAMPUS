version: '3.8'

services:
  # MongoDB (for local development/testing)
  mongodb:
    image: mongo:7.0
    container_name: smart-campus-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: smart-campus-klh
    volumes:
      - mongodb_data:/data/db
    networks:
      - smart-campus-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smart-campus-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:admin123@mongodb:27017/smart-campus-klh?authSource=admin
      JWT_SECRET: ${JWT_SECRET:-smart-campus-super-secret-jwt-key-change-in-production}
      JWT_EXPIRE: 7d
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      FRONTEND_URL: http://localhost:3000
    depends_on:
      - mongodb
    networks:
      - smart-campus-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: smart-campus-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - smart-campus-network

networks:
  smart-campus-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
